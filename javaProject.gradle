buildscript {
    repositories {
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    }
    dependencies {
        classpath(gradlePlugins.apt)
        classpath(gradlePlugins.propdeps)
    }
}

apply plugin: "java"
apply plugin: io.spring.gradle.propdeps.PropDepsPlugin
apply plugin: io.spring.gradle.propdeps.PropDepsMavenPlugin
apply plugin: io.spring.gradle.propdeps.PropDepsIdeaPlugin
apply plugin: io.spring.gradle.propdeps.PropDepsEclipsePlugin

if (gradle.gradleVersion < "5.2") {
    apply plugin: net.ltgt.gradle.apt.AptEclipsePlugin
    apply plugin: net.ltgt.gradle.apt.AptIdeaPlugin
    apply plugin: net.ltgt.gradle.apt.AptPlugin
}

ext {
    if (project.hasProperty("javaVersion")) {
        jdkVersion = project["javaVersion"]
    } else {
        jdkVersion = '1.8'
    }
}

compileJava {
    sourceCompatibility = jdkVersion
    targetCompatibility = jdkVersion
}

compileTestJava {
    sourceCompatibility = jdkVersion
    targetCompatibility = jdkVersion
}

configurations {

    providedRuntime
    all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    all*.exclude module: "slf4j-log4j12"

    dependencies {

        compileOnly(libraries.lombok)
        annotationProcessor(libraries.lombok)

        testCompileOnly(libraries.lombok)
        testAnnotationProcessor(libraries.lombok)

        testCompile(libraries.junit)
        testCompile(libraries.mockito)
        testCompile(libraries.assertj)
    }

}

[compileJava, compileTestJava]*.options*.encoding = "UTF-8"

eclipse.classpath.downloadSources = true
compileJava.dependsOn(processResources)
